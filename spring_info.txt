Spring Container
	-> creates manages instansiates objects -> factory pattern
	-> inversion of control
	-> dependency injection
	
Object Factory -> creates object based on Configuration -> object

Spring Bean Factory -> reads Spring XML (bean blueprint) -> 
Spring bean -> object.GETBEAN
BEAN SCOPES:
=> SINGLETON : ONLY ONCE PER STRING CONTAINER
=> PROTOTYPE : NEW BEAN CREATED WITH EVERY REQUEST OR REFERENCE

WEB-AWARE SCOPES:
=> REQUEST
=> SESSION
=> GLOBAL SESSION

create xml file -> add doctype of spring bean -> refer spring application context xml examples

=> beans 
	=> bean -> id,class, property
	
BeanFactory factory = new XmlBeanFactory(new FileSystemResource("spring.xml"));
(or)
ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
context.getBean("idname");

BEANS
	BEAN ID CLASS
		IDREF FOR FAIL PROOF REFERENCE -> MUST NEED THAT BEAN SPECIFIED
		PROPERTY NAME VALUE/REFERENCE
		CONSTRUCTOR ARG INDEX VALUE
		
AUTOWIRED:
	BYNAME
	BYTYPE => WHEN ONLY 1 CLASS / BEAN FOR TYPE USING SETTER OBJECT
	CONSTRUCTOR => WHEN ONLY 1 CLASS / BEAN FOR TYPE USING CONSTRUCTOR
	
IMPLEMENTS APPLICATIONCONTEXT,BEANNAMEAWARE,INITIALIZINGBEAN,DISPOSABLEBEAN,BEANFACTORYPOSTPROCESSOR

CONTEXT.REGISTERSHUTDOWNHOOK()

A SEPERATE CLASS IMPLEMENT FOR BEANPOSTPROCESSOR INTERFACE
AND THEN -> IN XML SPECIFY ITS BEAN
=> POSTPROCESSAFTER
=> POSTPROCESSBEFORE

POSTCONSTRUCT
PREDESTORY

=> AFTERPROPERTIESSET()
	AFTER BEAN IS INITIALIED
=> DESTROY

OR IN XML FILE
TO THE BEAN
<BEAN ID CLASS INIT-METHOD = "MY-INIT" DESTROY-METHOD = "MY-DESTROY"> 
i.e., INSTEAD OF IMPLEMENTATION PROVIDING USER SPECIFIED METHODS FOR INIT AND DESTROY
</BEAN>

<BEAN CLASS = "ORG.SPRINGFRAMEWORK.BEANS.FACTORY.CONFIG.PROPERTYPLACEHOLDERCONFIGURER">
	<PROPERTY NAME = "LOCATIONS" VALUE = "CONFIG.PROPERTIES">
 </BEAN>
 
 <BEAN CLASS = "ORG.SPRINGFRAMEWORK.BEANS.FACTORY.ANNOTATION.REQUIREDANNOTATIONBEANPOSTPROCESSOR">
 </BEAN>
 
 <BEAN CLASS = "ORG.SPRINGFRAMEWORK.BEANS.FACTORY.ANNOTATION.AUTOWIREDANNOTATIONBEANPOSTPROCESSOR">
 </BEAN>
 FIRST BY TYPE
 THEN BYNAME (VARIABLE NAME)
 EVEN THEN COULD NOT RESOLVE THE AUTOWIRING DEPENDENCY THEN AMBIGUITY EXCEPTION
 -> QUALIFIER(NAME="")
 
 @RESOURCE(NAME="POINTC") -> TO SPECIFICALLY GET THAT BEAN MENTIONED
 
<CONTEXT:ANNOTATION-CONFIG>-> TO ENABLE ANNOTATIONS
<CONTEXT:COMPONENT-SCAN BASE-PACKAGE=""></CONTEXT:COMPONENT-SCAN> -> TO ENABLE COMPONENT SCANNING ACROSS THAT PACKAGE
 
@COMPONENT
	-> INSTEAD OF ADDING XML BEAN

-> BELOW ARE ALSO COMPONENTS BUT ADDS THE ROLE/LEVEL OF DOCUMENTATION
@SERVICE
@RESPOSITORY
@CONTROLLER

<BEAN ID="MESSAGESOURCE" CLASS = "ORG.SPRINGFRAMEWORK.CONTEXT.SUPPORT.RESOURCEBUNDLEMESSAGESOURCE">
	<PROPERTY NAME = "BASENAMES">
		<LIST>
			<VALUE>MYMESSAGES</VALUE>
		</LIST>
	</PROPERTY>
</BEAN>

@COMPONENT
MYLISTENER IMPLEMENTS APPLICATIONLISTENER
	-> ONAPPLICATIONEVENT
		EVENT.TOSTRING()
	
IMPLEMENT APPLICATIONEVENTPLUBLISHAWARE
APPLICATIONEVENTPLUBLISHER
	->PUBLISHER.PUBLISHEVENT("EVENTOBJECT");