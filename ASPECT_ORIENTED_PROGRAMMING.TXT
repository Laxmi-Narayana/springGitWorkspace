ASPECT ORIENTED PROGRAMMING: CLASS FOR SPECIAL PREVILEGES
-> SIMILAR TO SERVLET FILTERS,STRUCT INTERCEPTORS,TRIGGERS
FUNCTIONAL PROGRAMMING

-> FUNCTIONAL PROGRAMMING WOULD BECOME COMPLEX IF WE HAVE MULTIPLE FUNCTIONS INTERDEPENT ON EACH OTHER FOR COMPLETION OF A TASK AND HARD TO MANAGE/DEBUG.
-> OBJECTS ARE ENCAPSULATED ENTITIES  EASIER TO MANAGE AND DEBUG, DESIGN MORE COMPLEX CODE

-> LOG MESSAGE NEEDS TO BE INCLUDED IN ALL OBJECTS

-> SEPERATE OBJECT LOGGER (BUT ITS NOT PART OF OUR BUSINESS PROBLEM)
-> TOO MANY RELATIONSHIPS TO THE CROSSCUTTING OBJECTS
-> CODE IS STILL REQUIRED IN ALL METHODS
-> CANNOT ALL BE CHANGED AT ONCE(BY INTERFACE BUT STILL NEED CHANGES)

LOGGING
SECURITY
TRANSACTIONS

=> ASPECTS
-> CLASS FOR ASPECT
-> LOGASPECT
-> TRANSACTIONASPECT
-> EXCEPTIONHANDLING TO PRINT ONTO CONSOLD
WE DONT REFERENCE THESE ASPECTS IN OUR OBJECTS
ASPECT CONFIGURATION DEALS WITH IT
-> SIMILAR TO FILTERS,STRUCT INTERCEPTORS,TRIGGERS
ASPECT CODE -> TARGET METHOD -> ASPECT CODE

@ASPECT
@BEFORE("EXECUTION(PUBLIC STRING GETNAME())")
PUBLIC VOID LOGGINADVICE() {
	SYSOUT("WOW");
}

<AOP:ASPECTJ-AUTOPROXY />
@BEFORE("EXECUTION(* GET*(*))") => WILDCARD GET(..) 0 OR MORE ARGUMENTS (*) -> ONE OR MORE ARGUMENTS

@AFTER
@AROUND
@AFTERRETURNING
@AFTERTHROWING
@POINTCUT
@JOINPOINT
@PROCEEDINGJOINPOINT


PROXY OBJECTS -> CLASS -> CLASS-> CLASS FOR MORE FEATURES
PROXY DESIGN PATTERN